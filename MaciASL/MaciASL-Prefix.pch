//
// Prefix header for all source files of the 'MaciASL' target in the 'MaciASL' project
//

#ifdef __OBJC__
    #import <Cocoa/Cocoa.h>
#endif

#define kMaciASLDomain @"MaciASLDomain"
#define kUTTypeAML @"org.acpica.aml"
#define kUTTypeDSL @"org.acpica.dsl"
#define kUTTypeNavObject @"net.sourceforge.maciasl.navobject"
#define kUTTypeTableset @"net.sourceforge.maciasl.tableset"
#define kUTTypeIOJones @"net.sourceforge.iojones"
#define kSystemTableset @"//System"
#define kCompilerError 1
#define kFileError 2
#define kACPIError 3
#define kNavigatorError 4
#define kDecompileError 5
#define kAScriptFileError 6
#define kURLStandardError 7
#define kNULLSSDTError 8
#define kFreqRangeError 9
#define kNSComparisonPredicateError 10
#define kLockError 11
#define kStoreError 12
#define kTablesetError 13

#define lineForRange(x,y) [x substringWithRange:[x lineRangeForRange:y]]
#define assignWithNotice(x,y,z) [x willChangeValueForKey:@""#y];y=z;[x didChangeValueForKey:@""#y];
#define muteWithNotice(x,y,z) [x willChangeValueForKey:@""#y];z;[x didChangeValueForKey:@""#y];
#define insertWithNotice(x,y,z) [x willChange:NSKeyValueChangeInsertion valuesAtIndexes:[NSIndexSet indexSetWithIndex:y.count] forKey:@""#y];[y addObject:z];[x didChange:NSKeyValueChangeInsertion valuesAtIndexes:[NSIndexSet indexSetWithIndex:y.count-1] forKey:@""#y];

NS_INLINE NSError* ModalError(NSError *error){
    if (error)
        [[NSAlert alertWithError:error] runModal];
    return error;
}
NS_INLINE void SplitView(NSSplitView *splitView){
    NSUInteger i = 0;
    for (NSString *frame in [NSUserDefaults.standardUserDefaults stringArrayForKey:[@"NSSplitView Subview Frames " stringByAppendingString:splitView.autosaveName]])
         [[splitView.subviews objectAtIndex:i++] setFrame:NSRectFromString(frame)];
    splitView.needsLayout = true;
}
NS_INLINE NSUInteger CountCharInStr(NSString *string, unichar c) {
    NSUInteger count = 0;
    NSUInteger i = string.length;
    while (i-- > 0)
        if ([string characterAtIndex:i] == c)
            count++;
    return count;
}
NS_INLINE BOOL LoadNib(NSString *nib, id owner) {
    ////if ([NSBundle instancesRespondToSelector:@selector(loadNibNamed:owner:topLevelObjects:)])
    ////    return [NSBundle.mainBundle loadNibNamed:nib owner:owner topLevelObjects:nil];
    ////else
    ////    return [NSBundle loadNibNamed:nib owner:owner];
#if MAC_OS_X_VERSION_MIN_REQUIRED > MAC_OS_X_VERSION_10_7
    return [NSBundle.mainBundle loadNibNamed:nib owner:owner topLevelObjects:nil];
#else
    return [NSBundle loadNibNamed:nib owner:owner];
#endif
}
NS_INLINE void AsynchB(NSURL *url, void(^completionHandler)(NSString *), dispatch_queue_t queue) {
    dispatch_async(queue ?: dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        NSURLResponse *response;
        NSError *err;
        NSData *data = [NSURLConnection sendSynchronousRequest:[NSURLRequest requestWithURL:url cachePolicy:NSURLRequestReloadIgnoringCacheData timeoutInterval:60] returningResponse:&response error:&err];
        if ([response respondsToSelector:@selector(statusCode)] && [(NSHTTPURLResponse *)response statusCode] != 200) {
            if (!err)
                err = [NSError errorWithDomain:NSURLErrorDomain code:[(NSHTTPURLResponse *)response statusCode] userInfo:@{NSLocalizedDescriptionKey:@"File Fetch Error",NSLocalizedRecoverySuggestionErrorKey:[NSString stringWithFormat:@"URL '%@' said '%@'",url,[NSHTTPURLResponse localizedStringForStatusCode:[(NSHTTPURLResponse *)response statusCode]]]}];
            ModalError(err);
        }
        else
            dispatch_async(dispatch_get_main_queue(), ^{completionHandler([[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding]);});
    });
}
